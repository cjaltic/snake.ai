5/3/2024
Initial commit
update readme
created Snake Coordinate Food and Board classes
Implemeted food and coordinate functionality
Implemented the main functionality for the snake class, there's nothing to run it on
so I can't test it right now.  
I'm considering adding a Main class on top of the board class to run it easier

5/4/2024
Completing board functionality
Created GUI class, started GUI implementation
developed GUI class.  able to print out a snake and food
next step is to connect the GUI to the board and get the game running

Got the GUI connected to the board, addressed a few bugs but now the snake
is crawling around the screen smoothly.  Going to take a break but when I come back
need to address the following issues:
	- Create the Board, Snake, etc inside of the Painter constructor
	- get game clock running (right now a "tick" only happens when you hit a button)
		-- set up different speeds
	- set up game rules
		-- snake can not pass through itself
		-- playing field needs borders
		-- hitting oneself or hitting the border means death
	- create start and end screen
	- should probably wrap everything in a Main class just to be safe
		-- Control the loop from inside the GUI but can still create the starting board
		   and snake from the Main class
		-- This can act as a test harness as well

	- idea for if the game is running slow:
		-- instead of redrawing the snake every tick, draw a green square over the last tail piece and redraw the head

5/4/2024 Afternoon
built the Game class which is a wrapper to join the board and painter classes
The game runs just as it did before from calling that class
Need to figure out a more streamlined way of passing width and height vars

fixed a control issue, can now only give one direction input per frame

Added game clock with variable speeds.  Right now just have 3 speeds 

consider not using an infinite loop in the Painter and just relying on the main
loop in Game.py

The game is essentially complete.  I would still like to add a start screen and untangle the loops and how the
board dimensions are being passed but for now this works perfectly.  Now I'm gonna start on the AI side.

Would also like to add a quick high score tracker that saves between boots.  If I get the time I'll add that tomorrow.


5/5
Got the high score engine built and working.

I've started adding code to make the AI able to control it.  I added a Computer class and will be adding a Controller class.
I also added two variables to the Game class.  Game Mode and Graphics Mode.  Game Mode is 0 or 1 for human or computer player,
respectively.  and Graphics Mode is 0 or 1 for Graphics on or off.  Graphics can only be turned off for the computer player
for two reasons:  1) the main game loop is all in the Painter.  2) the key listener is a part of the pygame environment so 
I don't have a way of taking user input outside the Painter class.  
I'm also starting to realize setting up the GUI for the Computer player will be a whole different thing with it being wired through
the computer class.  I'm going to start with the no graphics approach.  The no graphics mode will be the most used approach when
I'm working with the AI.  And I don't have much of a need to have full graphics working until I have a good AI implemented anyway.  

Made some good progress on implementing the computer class.  I started trying to run a thousand games at a time with the random 
controller but after looking at the data from it realized the board is not resetting.  After trying to get the board to reset
theres a bug where it will only run once.  Will have to figure this out later.


5/6 
I want the computer to just have one method playGame() that does everything we need.  It creates a brand new board, and runs one game.  
If I have this in place it will be easier to abstract and run many games and it will be easier to implement some data collection.
I might need to redo a lot of my work on the Computer class but this is the way forward.








